---
# Ansible virtualization tools for lab based deployments
# Copyright (C) 2019  Kevin Carter
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


- name: Run tripleo setup
  hosts: "undercloud:minion:standalone"
  any_errors_fatal: true
  gather_facts: true
  vars_files:
    - vars/main.yml

  pre_tasks:
    - name: Gather variables for each operating system
      include_vars: "{{ item }}"
      with_first_found:
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_os_family | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}.yml"
        - "{{ ansible_os_family | lower }}-{{ ansible_distribution_version.split('.')[0] }}.yml"
        - "{{ ansible_os_family | lower }}.yml"
      tags:
        - always

    - name: set hostname properly
      become: true
      lineinfile:
        dest: /etc/hosts
        line: "127.0.0.1 undercloud.{{ ansible_domain }} undercloud localhost localhost.localdomain"
        regexp: '^127\.0\.0\.1'

    - name: Set instackenv file fact
      set_fact:
        vm_instackenv_file: "{{ lookup('env','HOME') }}/vm-instackenv.yaml"
      when:
        - vm_instackenv_file is undefined

    - name: Standard deployment block
      block:
        - name: Copy instackenv into place
          copy:
            src: "{{ vm_instackenv_file }}"
            dest: "{{ ansible_env.HOME }}/vm-instackenv.yaml"

        - name: Read instackenv yaml
          slurp:
            src: "{{ ansible_env.HOME }}/vm-instackenv.yaml"
          register: instack_env

        - name: Set ironic nodes
          set_fact:
            standard_target_nodes: "{{ (instack_env['content'] | b64decode | from_yaml)['nodes'] }}"
      rescue:
        - name: Notice
          debug:
            msg: "No standard target nodes will be defined."

    - name: Prep-provisioned nodes
      when:
        - vm_inventory_file is defined
      block:
        - name: Copy pre-provisioned node yaml into place
          copy:
            src: "{{ vm_inventory_file }}"
            dest: "{{ ansible_env.HOME }}/{{ vm_inventory_file | basename }}"

        - name: Read pre-provisioned node yaml
          slurp:
            src: "{{ ansible_env.HOME }}/{{ vm_inventory_file | basename }}"
          register: preprov_targets

        - name: Read pre-provisioned nodes data
          set_fact:
            preprov_data: "{{ preprov_targets['content'] | b64decode | from_yaml }}"

        - name: Set pre-provisioned nodes
          set_fact:
            preprov_target_nodes: "{{ preprov_data['vms']['hosts'].values() | list }}"

    - name: CA certificate block
      when:
        - redhat_ca_certs_url is defined
      block:
        - name: Check for ca
          stat:
            path: "/etc/pki/ca-trust/source/anchors/{{ redhat_ca_certs_url | basename }}"
          register: rh_it_ca_stat

        - name: Read RH IT CA
          slurp:
            src: "/etc/pki/ca-trust/source/anchors/{{ redhat_ca_certs_url | basename }}"
          register: rh_it_ca
          when:
            - rh_it_ca_stat.stat.exists | bool

        - name: Set rh ca fact
          set_fact:
            ca_certificate_fact: "{{ rh_it_ca['content'] | b64decode }}"
          when:
            - rh_it_ca_stat.stat.exists | bool

  tasks:
    - name: Refresh local facts
      setup:
        gather_subset: "!all"

    - name: Create undercloud config
      template:
        src: templates/undercloud-parameters.yaml.j2
        dest: "{{ ansible_env.HOME }}/undercloud-parameters.yaml"
      when:
        - tripleo_deploy | bool

    - name: Create images directory
      file:
        path: "{{ ansible_env.HOME }}/images"
        state: directory

    - name: Centos package setup
      when:
        - (ansible_distribution | lower) == 'centos'
      become: true
      block:
        - name: Run package updates
          package:
            name: "*"
            state: "latest"
          register: package_updates
          until: package_updates is success
          retries: 3
          delay: 16

        - name: Install tripleoclient package
          package:
            name: "python*tripleoclient"
            state: present

        - name: Client install success
          set_fact:
            tripleo_deploy: true
      rescue:
        - name: Notice
          debug:
            msg: >-
              The client installation has failed so TripleO deployment will be disabled.

        - name: Client install failed
          set_fact:
            tripleo_deploy: false

    - name: Redhat package setup
      when:
        - (ansible_distribution | lower) == 'redhat'
      block:
        - name: Fetch params
          get_url:
            url: "{{ redhat_puddle_local_images_url }}"
            dest: "{{ ansible_env.HOME }}/container_image_prepare.yaml"
          when:
            - redhat_puddle_local_images_url is defined

        - name: Read pre-provisioned parameter yaml
          slurp:
            src: "{{ ansible_env.HOME }}/container_image_prepare.yaml"
          register: container_image_prepare

        - name: Create compose details fact
          set_fact:
            compose_details: "{{ container_image_prepare['content'] | b64decode | from_yaml }}"

        - name: Install tripleo packages (py2)
          package:
            name:
              - python-tripleoclient
              - vim
              - patch
              - git
              - patchutils
              - iptables-services
              - rhosp-director-images
              - rhosp-director-images-ipa
            allow_downgrade: true
            state: latest
          become: true
          when:
            - ansible_facts['python_version'] is version('3.0', 'lt', strict=True)

        - name: Install tripleo packages (py3)
          package:
            name:
              - python3-tripleoclient
              - vim
              - network-scripts
              - patch
              - git
              - patchutils
              - iptables-services
              - rhosp-director-images
              - rhosp-director-images-ipa
            allow_downgrade: true
            state: latest
          become: true
          when:
            - ansible_facts['python_version'] is version('3.0', 'gt', strict=False)

      rescue:
        - name: Notice
          debug:
            msg: >-
              The client installation has failed so OSP deployment will be disabled.

        - name: Client install failed
          set_fact:
            tripleo_deploy: false

    - name: Image tag block
      when:
        - (ansible_distribution_major_version | int) == 8
      block:
        - name: Get image tag
          uri:
            url: https://trunk.rdoproject.org/centos8-master/current-tripleo/delorean.repo.md5
            return_content: yes
          register: c8_md5

        - name: Set image tag fact
          set_fact:
            tripleo_image_tag: "{{ c8_md5.content }}"

    - name: Create local_images params
      template:
        src: templates/local_images.yaml.j2
        dest: "{{ ansible_env.HOME }}/local_images.yaml"

    - name: Create params yaml
      template:
        src: templates/parameters.yaml.j2
        dest: "{{ ansible_env.HOME }}/parameters.yaml"

    - name: pre-provisioned block
      when:
        - vm_inventory_file is defined
        - (tripleo_deploy_pre_provisioned is defined) and (tripleo_deploy_pre_provisioned | bool)
      block:
        - name: Run pre-provisioned node parameter create
          copy:
            content: |-
              {{ lookup('file', vm_inventory_file) | default('---') | from_yaml | preprov_hosts | to_nice_yaml }}
            dest: "{{ ansible_env.HOME }}/pre-provisioned-parameters.yaml"

        - name: Read pre-provisioned parameter yaml
          slurp:
            src: "{{ ansible_env.HOME }}/pre-provisioned-parameters.yaml"
          register: preprov_params

        - name: Read pre-provisioned nodes data
          set_fact:
            preprov_param_data: "{{ preprov_params['content'] | b64decode | from_yaml }}"

        - name: Write host entry for node map
          lineinfile:
              path: /etc/hosts
              state: present
              line: "{{ item }}"
          become: true
          loop: "{{ preprov_param_data['parameter_defaults'] | preprov_host_entry }}"

        - name: Write non-ha params
          copy:
            content: "{{ preprov_param_data | non_ha | to_nice_yaml }}"
            dest: "{{ ansible_env.HOME }}/pre-provisioned-parameters.yaml"
          when:
            - not ((preprov_target_nodes | selectattr("tripleo_deploy_type", "match", ".*control.*") | list | length) > 1)

        - name: Ensure templates temp path exists
          file:
            path: /tmp/templates
            state: directory

        - name: Create network interface template
          template:
            src: "templates/vm_interface_template.yaml.j2"
            dest: "/tmp/templates/vm_interface_template.yaml"
          when:
            - tripleo_deploy | bool

    - name: Novaless provisioning block
      when:
        - vm_inventory_file is defined
        - (tripleo_overcloud_novaless is defined) and (tripleo_overcloud_novaless | bool)
      block:
        - name: Run novaless node parameter create
          copy:
            content: |-
              {{ lookup('file', vm_inventory_file) | default('---') | from_yaml | novaless_hosts | to_nice_yaml }}
            dest: "{{ ansible_env.HOME }}/overcloud-baremetal-config.yaml"

    - name: Set global fact
      set_fact:
        tripleo_deploy: "{{ tripleo_deploy }}"
      run_once: true

    - name: Undercloud config block
      when:
        - inventory_hostname in (groups['undercloud'] | union(groups['standalone']))
      block:
        - name: Create undercloud config
          copy:
            src: /usr/share/python-tripleoclient/undercloud.conf.sample
            dest: "{{ ansible_env.HOME }}/undercloud.conf"
            remote_src: true

        - name: Update the undercloud config
          ini_file:
            path: "{{ ansible_env.HOME }}/undercloud.conf"
            section: "{{ item.section }}"
            option: "{{ item.option }}"
            value: "{{ item.value }}"
            backup: false
          loop: |-
            {% set items = [] %}
            {% for k, v in (tripleo_undercloud_config | combine(tripleo_undercloud_config_overrides, recursive=True)).items() %}
            {%   for _k, _v in v.items() %}
            {%     set value = {} %}
            {%     set _ = value.__setitem__('section', k) %}
            {%     set _ = value.__setitem__('option', _k) %}
            {%     set _ = value.__setitem__('value', _v) %}
            {%     set _ = items.append(value) %}
            {%   endfor %}
            {% endfor %}
            {{ items }}

    - name: Minion config block
      when:
        - inventory_hostname in groups['minion']
      block:
        - name: Create minion config
          copy:
            src: /usr/share/python-tripleoclient/minion.conf.sample
            dest: "{{ ansible_env.HOME }}/minion.conf"
            remote_src: true

        - name: Update the minion config
          ini_file:
            path: "{{ ansible_env.HOME }}/minion.conf"
            section: "{{ item.section }}"
            option: "{{ item.option }}"
            value: "{{ item.value }}"
            backup: false
          loop: |-
            {% set items = [] %}
            {% for k, v in (tripleo_minion_config | combine(tripleo_minion_config_overrides, recursive=True)).items() %}
            {%   for _k, _v in v.items() %}
            {%     set value = {} %}
            {%     set _ = value.__setitem__('section', k) %}
            {%     set _ = value.__setitem__('option', _k) %}
            {%     set _ = value.__setitem__('value', _v) %}
            {%     set _ = items.append(value) %}
            {%   endfor %}
            {% endfor %}
            {{ items }}

    - name: System block
      become: true
      block:
        - name: Add the br-netfilter module
          modprobe:
            name: br-netfilter
            state: present

        - name: make module persistent
          lineinfile:
            path: /etc/modprobe.d/netfilter.conf
            line: options br-netfilter
            owner: root
            group: root
            mode: '0644'
            create: true

        - name: Create swap space
          command: dd if=/dev/zero of=/swapfile bs=1M count=2048
          register: mkswap_file
          args:
            creates: /swapfile

        - name: set permissions on swap file
          file:
            path: /swapfile
            mode: 0600

        - name: format swap file
          command: mkswap /swapfile
          when:
            - mkswap_file is changed

        - name: add to fstab
          lineinfile:
            dest: /etc/fstab
            regexp: "/swapfile"
            line: "/swapfile none swap sw 0 0"

        - name: turn on swap
          command: swapon /swapfile
          when:
            - mkswap_file is changed

        - name: set swapiness
          sysctl:
            name: vm.swappiness
            value: "10"

    - name: Ensure the user group exists
      become: true
      group:
        name: "{{ ansible_env.USER }}"
        state: present

    - name: Create ssh key pair
      become: true
      user:
        name: "{{ ansible_env.USER }}"
        generate_ssh_key: yes
        ssh_key_bits: 2048
        ssh_key_file: "{{ ansible_env.HOME }}/.ssh/id_rsa"
        groups:
          - wheel

    - name: Ensure .ssh directory
      become: true
      file:
        path: "{{ ansible_env.HOME }}/.ssh"
        state: directory
        owner: "{{ ansible_env.USER }}"
        group: "{{ ansible_env.USER }}"
        mode: "0700"

    - name: Accept ssh on all devices
      iptables:
        chain: INPUT
        protocol: tcp
        destination_port: 22
        ctstate: NEW
        syn: match
        jump: ACCEPT
        comment: "100 ssh on all"
      become: yes

    - name: Create deploy script(s)
      template:
        src: templates/{{ item }}.j2
        dest: "{{ ansible_env.HOME }}/{{ item }}"
        mode: '0755'
      loop:
        - deploy-undercloud-script.sh
        - deploy-overcloud-script.sh
        - deploy-start-script.sh
        - deploy-minion-script.sh
        - deploy-build-images.sh
      when:
        - inventory_hostname in (groups['undercloud'] | union(groups['standalone']))

    - name: NFS block
      when:
        - tripleo_nfs_image_mount is defined
      become: true
      block:
        - name: Create images directory
          file:
            path: "{{ tripleo_nfs_image_mount.path }}"
            state: directory

        - name: Mount nfs share for images
          mount:
            path: "{{ tripleo_nfs_image_mount.path }}"
            src: "{{ tripleo_nfs_image_mount.src }}"
            fstype: "{{ tripleo_nfs_image_mount.fstype }}"
            opts: "{{ tripleo_nfs_image_mount.opts }}"
            state: mounted
