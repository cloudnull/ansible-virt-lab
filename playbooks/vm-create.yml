---
# Ansible virtualization tools for lab based deployments
# Copyright (C) 2019  Kevin Carter
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


#
# This playbook has three basic options:
#   * vm_cleanup - if `true` clenaup old VMs and create create new ones
#   * vm_purge - if `true` purge all VMs
#   * vm_flags - Options to pass into libvirt (virt-install).
#
# This setup tool requires two networks to be enabled within libvirt: ['provisioning', 'external'].
#

- name: Create VMs on baremetal machines
  hosts: all_vms
  any_errors_fatal: true
  gather_facts: false
  user: root
  vars:
    vm_start_on_create: "{{ inventory_hostname in groups['raw_vms'] }}"
    vm_cleanup: false
    vm_purge: false
    vm_flags: >-
      --graphics vnc,listen=0.0.0.0
      --controller scsi,model=virtio-scsi
      --serial pty
      --parallel pty
      --hvm
      --virt-type kvm
      --memballoon virtio
      --cpu host
      --rng /dev/urandom
    vm_image_data:
      centos7:
        url: https://cloud.centos.org/centos/7/images/CentOS-7-x86_64-GenericCloud.qcow2
        path: /mnt/rhv/images
        name: CentOS-7-x86_64-GenericCloud.qcow2
        access_user: 'centos'
        cloud_init_packages:
          - qemu-guest-agent
      fedora28:
        url: https://download.fedoraproject.org/pub/fedora/linux/releases/28/Cloud/x86_64/images/Fedora-Cloud-Base-28-1.1.x86_64.qcow2
        path: /mnt/rhv/images
        name: Fedora-Cloud-Base-28-1.1.x86_64.qcow2
        access_user: 'fedora'
        cloud_init_packages:
          - qemu-guest-agent
      fedora30:
        url: https://download.fedoraproject.org/pub/fedora/linux/releases/30/Cloud/x86_64/images/Fedora-Cloud-Base-30-1.2.x86_64.qcow2
        path: /mnt/rhv/images
        name: Fedora-Cloud-Base-30-1.2.x86_64.qcow2
        access_user: 'fedora'
        cloud_init_packages:
          - qemu-guest-agent
    vm_pub_key: "{{ lookup('env', 'HOME') }}/.ssh/id_rsa.pub"

  handlers:
    - name: Deployment notice
      debug:
        msg: >-
          VM(s) creation has completed. An instackenv file has been created for the generated nodes.
          This file can be found here `{{ lookup('env','HOME') }}/vm-instackenv.yaml`.
      run_once: true

    - name: Display ip address
      debug:
        msg: >-
          VM {{ inventory_hostname }} is online. IP address {{ vm_ip_address }}

    - name: Raw deployment notice
      debug:
        msg: >-
          VM(s) creation has completed. An instackenv file has been created for the generated nodes.
          This file can be found here `{{ lookup('env','HOME') }}/vm-lab-inventory.yaml`.
      run_once: true

  pre_tasks:
    - name: Check for required hostvars
      fail:
        msg: >-
          The required variable `{{ item.name }}` is undefined. Define the option in order to continue.
      when:
        - item.condition | bool
        - hostvars[inventory_hostname][item.name] is undefined
      with_items:
        - name: vm_virt_host
          condition: true
        - name: vm_cores
          condition: true
        - name: vm_ram
          condition: true
        - name: vm_disk_size
          condition: true
        - name: vm_vbmc_username
          condition: "{{ inventory_hostname in groups['osp_vms'] }}"
        - name: vm_vbmc_password
          condition: "{{ inventory_hostname in groups['osp_vms'] }}"
        - name: vm_vbmc_port
          condition: "{{ inventory_hostname in groups['osp_vms'] }}"
        - name: vm_image_name
          condition: "{{ inventory_hostname in groups['raw_vms'] }}"
      delegate_to: localhost
      connection: local

    - name: Download vm image
      get_url:
        url: "{{ vm_image_data[vm_image_name]['url'] }}"
        dest: "{{ vm_image_data[vm_image_name]['path'] }}/{{ vm_image_data[vm_image_name]['url'] | basename }}"
      delegate_to: "{{ vm_virt_host }}"
      async: 1024
      poll: 0
      register: _image_get
      run_once: true
      when:
        - inventory_hostname in groups['raw_vms']

    - name: Create in-memory vm_virt_hosts group
      add_host:
        name: "{{ hostvars[item]['vm_virt_host'] }}"
        groups: vm_virt_hosts
      changed_when: false
      with_items: "{{ groups['all_vms'] }}"
      run_once: true

    - name: PreFlight Checks
      delegate_to: "{{ vm_virt_host }}"
      block:
        - name: Check VM
          command: >-
            virsh dominfo {{ inventory_hostname }}
          failed_when: false
          changed_when: false
          register: vm_dominfo

        - name: Check VM provisioning network
          command: >-
            virsh net-info provisioning
          ignore_errors: true
          changed_when: false
          register: vm_netinfo_provisioning
          run_once: true
          delegate_to: "{{ item }}"
          with_items: "{{ groups['vm_virt_hosts'] }}"

        - name: Check VM external network
          command: >-
            virsh net-info external
          ignore_errors: true
          changed_when: false
          register: vm_netinfo_external
          run_once: true
          delegate_to: "{{ item }}"
          with_items: "{{ groups['vm_virt_hosts'] }}"

        - name: Fail when required networks are missing
          fail:
            msg: >-
              One of the required networks ['provisioning', 'external'] is missing on `{{ vm_virt_host }}`.
              Please ensure the network is created and online before continuing.
          when:
            - (vm_netinfo_provisioning is failed) or (vm_netinfo_external is failed)
          run_once: true

    - name: Cleanup block
      when:
        - ((vm_cleanup | bool) and (vm_dominfo.rc == 0)) or (vm_purge | bool)
      delegate_to: "{{ vm_virt_host }}"
      block:
        - name: Stop running VM
          virt:
            name: "{{ inventory_hostname }}"
            command: destroy
          ignore_errors: true

        - name: Undefine running VM
          virt:
            name: "{{ inventory_hostname }}"
            command: undefine
          ignore_errors: true

        - name: Clean up base image file
          file:
            path: "/var/lib/libvirt/images/{{ inventory_hostname }}"
            state: absent

        - name: Remove node from vbmc
          command: /opt/vbmc/bin/vbmc delete {{ inventory_hostname }}
          ignore_errors: true

  tasks:
    - name: Check for purge
      meta: end_play
      when:
        - vm_purge | bool

    - name: Create block
      delegate_to: "{{ vm_virt_host }}"
      when:
        - (vm_cleanup | bool) or
          (vm_dominfo.rc == 1)
      block:
        - name: Create vm directory
          file:
            path: "/var/lib/libvirt/images/{{ inventory_hostname }}"
            state: directory

        - name: Gather virt-host facts
          setup:
            gather_subset: "!facter,!ohai"

        - include_tasks: task-files/_vm-raw-create.yml
          when:
            - inventory_hostname in groups['raw_vms']

        - include_tasks: task-files/_vm-osp-create.yml
          when:
            - inventory_hostname in groups['osp_vms']

        - name: VM start block
          block:
            - name: Start VM
              virt:
                name: "{{ inventory_hostname }}"
                state: running
                autostart: true
              notify: Display ip address

            - name: Get IP address
              shell: >-
                virsh domifaddr {{ inventory_hostname }} --source agent | grep -v 'lo' | grep 'ipv4'
              changed_when: false
              register: vm_ip
              until: vm_ip.rc == 0
              retries: 72
              delay: 5

            - name: Set ip fact
              set_fact:
                vm_ip_address: "{{ vm_ip.stdout.split()[3].split('/')[0] }}"

            - name: Finishing block
              delegate_to: "localhost"
              connection: local
              run_once: true
              block:
                - name: Set inventory file path
                  set_fact:
                    raw_vm_inventory_file: "{{ lookup('env','HOME') }}/vm-lab-inventory.yaml"

                - name: Read existing inventory file
                  set_fact:
                    existing_raw_vm_inventory_file: "{{ lookup('file', raw_vm_inventory_file, errors='ignore') | default('---', True) | from_yaml }}"

                - name: Write raw vm inventory file
                  copy:
                    content: |-
                      {%
                          set inventory = {
                            'vms': {
                              'vars': {
                                'ansible_ssh_common_args': '-o StrictHostKeyChecking=no'
                              },
                              'hosts': {}
                            }
                          }
                      %}
                      {% for node in ansible_play_batch %}
                      {%   if node in groups['raw_vms'] %}
                      {%
                             set entry = {
                               'ansible_host': hostvars[node]['vm_ip_address'],
                               'ansible_user': vm_image_data[hostvars[node]['vm_image_name']]['access_user']
                             }
                      %}
                      {%     set _ = inventory['vms']['hosts'].__setitem__(node, entry) %}
                      {%   endif %}
                      {% endfor %}
                      {{ existing_raw_vm_inventory_file | combine(inventory, recursive=True) | to_nice_yaml }}
                    dest: "{{ raw_vm_inventory_file }}"
                  notify: Raw deployment notice
          when:
            - vm_start_on_create | bool
