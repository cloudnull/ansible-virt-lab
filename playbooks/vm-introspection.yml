---
# Ansible cloud tools for lab based deployments
# Copyright (C) 2019  Kevin Carter
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


- name: Inspect target virtual machines
  hosts: localhost
  any_errors_fatal: true
  gather_facts: true
  user: root
  vars_files:
    - vars/main.yml

  tasks:
    - name: Check for required hostvars
      fail:
        msg: >-
          The required variable `{{ item.name }}` is undefined. Define the option in order to continue.
      when:
        - item.condition | bool
        - hostvars[inventory_hostname][item.name] is undefined
      with_items:
        - name: vm_job_target
          condition: true
      connection: local

    - name: Create in-memory vm_virt_hosts group
      add_host:
        name: "{{ hostvars[vm_job_target]['vm_virt_host'] }}"
        groups: vm_virt_host
      changed_when: false

    - name: VM data block
      delegate_to: "{{ hostvars[vm_job_target]['vm_virt_host'] }}"
      block:
        - name: Start vm if needed
          virt:
            name: "{{ vm_job_target }}"
            state: running

        - name: Get IP address
          shell: >-
            virsh domifaddr {{ vm_job_target }} --source agent | grep -v 'lo' | grep 'ipv4'
          register: _vm_ip
          changed_when: false
          until: _vm_ip.rc == 0
          retries: 72
          delay: 2

    - name: Set vm information
      set_fact:
        vm_ip: "{{ _vm_ip.stdout.split()[3].split('/')[0] }}"
        vm_image_info: "{{ vm_image_data[hostvars[vm_job_target]['vm_image_name']] }}"

    - name: Display vm ip
      debug:
        msg: >-
          The target VM has an ip address of `{{ vm_ip }}`.

    - name: Create in-memory vm_target group
      add_host:
        name: "{{ vm_job_target }}"
        groups: targets,vm_target
        ansible_host: "{{ vm_ip }}"
        ansible_user: "{{ vm_image_info['access_user'] }}"
        ansible_python_interpreter: "{{ vm_image_info['python_interpreter'] }}"
      changed_when: false
