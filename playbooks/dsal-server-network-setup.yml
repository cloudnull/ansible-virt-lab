---
# Ansible virtualization tools for lab based deployments
# Copyright (C) 2019  Kevin Carter
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


- name: Setup networking on DSAL hosts
  hosts: dsal_hosts
  any_errors_fatal: true
  gather_facts: true
  user: root
  vars:
    dsal_destroy_array: false
  vars_files:
    - vars/main.yml
  tasks:
    - name: install needed network manager libs
      package:
        name:
          - NetworkManager-glib
          - nm-connection-editor
          - libsemanage-python
          - policycoreutils-python
        state: present

    - name: Create networking up script
      copy:
        content: |-
          #!/usr/bin/env bash
          EXIT=0
          {% if server_provisioning_device.find('v=' ~ 'VLAN') == -1 %}
          {%   set provisioning_if = (server_provisioning_device.split('-')[0] ~ '-' ~ server_provisioning_device.split('-')[-1]) %}
          if ! ip link show {{ provisioning_if }}; then
            ip link add link {{ server_provisioning_device.split('-')[0] }} name {{ provisioning_if }} type vlan id {{ server_provisioning_device.split('VLAN')[-1] }}
            ip link set {{ provisioning_if }} up
            EXIT=99
          fi
          if ! ip link show br-{{ provisioning_if }}; then
            ip link add name br-{{ provisioning_if }} type bridge
            ip link set dev br-{{ provisioning_if }} up
            ip link set dev {{ provisioning_if }} master br-{{ provisioning_if }}
            EXIT=99
          fi
          {% endif %}
          {% if server_external_device.find('v=' ~ 'VLAN') == -1 %}
          {%   set external_if = (server_external_device.split('-')[0] ~ '-' ~ server_external_device.split('-')[-1]) %}
          if ! ip link show {{ external_if }}; then
            ip link add link {{ server_external_device.split('-')[0] }} name {{ external_if }} type vlan id {{ server_external_device.split('VLAN')[-1] }}
            ip link set {{ external_if }} up
            EXIT=99
          fi
          if ! ip link show br-{{ external_if }}; then
            ip link add name br-{{ external_if }} type bridge
            ip link set dev br-{{ external_if }} up
            ip link set dev {{ external_if }} master br-{{ external_if }}
            EXIT=99
          fi
          {% endif %}
          {% if (server_uplink_device.find('v=' ~ 'VLAN') == -1) and (server_uplink_device.split('VLAN')[-1] is number) %}
          {%   set uplink_if = (server_uplink_device.split('-')[0] ~ '-' ~ server_uplink_device.split('-')[-1]) %}
          if ! ip link show {{ uplink_if }}; then
            ip link add link {{ server_uplink_device.split('-')[0] }} name {{ uplink_if }} type vlan id {{ server_uplink_device.split('VLAN')[-1] }}
            ip link set {{ uplink_if }} up
            EXIT=99
          fi
          if ! ip link show br-{{ uplink_if }}; then
            ip link add name br-{{ uplink_if }} type bridge
            ip link set dev br-{{ uplink_if }} up
            ip link set dev {{ uplink_if }} master br-{{ uplink_if }}
            EXIT=99
          fi
          {% endif %}
          exit ${EXIT}
        dest: /usr/local/bin/vm-net-up
        mode: '0755'

    - name: Run vm network script
      command: /usr/local/bin/vm-net-up
      register: run_net_script
      failed_when: run_net_script.rc not in [0, 99]
      changed_when: run_net_script.rc == 99
