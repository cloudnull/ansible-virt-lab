---
# Ansible virtualization tools for lab based deployments
# Copyright (C) 2019  Kevin Carter
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


- name: Cloud-init block
  when:
    - inventory_hostname in groups['provisioned_vms']
  block:
    - name: Copy meta file
      template:
        src: meta-data.j2
        dest: "/var/lib/libvirt/images/{{ inventory_hostname }}/meta-data"

    - name: Copy user file
      template:
        src: user-data.j2
        dest: "/var/lib/libvirt/images/{{ inventory_hostname }}/user-data"
      vars:
        vm_packages: "{{ vm_image_data[hostvars[inventory_hostname]['vm_image_name']]['cloud_init_packages'] }}"

    - name: Create cloud init iso
      command: >-
        genisoimage -output /var/lib/libvirt/images/{{ inventory_hostname }}/cidata.iso -volid cidata -joliet -r user-data meta-data
      args:
        chdir: "/var/lib/libvirt/images/{{ inventory_hostname }}"
        creates: "/var/lib/libvirt/images/{{ inventory_hostname }}/cidata.iso"

- name: Undefine running VM
  virt:
    name: "{{ inventory_hostname }}"
    command: undefine
  register: undefine
  until: undefine is success
  retries: 2
  delay: 1
  ignore_errors: true

- name: Create virt xml
  command: >-
    virt-install
      --ram {{ vm_ram }}
      --vcpus={{ vm_cores }},sockets=1,cores={{ vm_cores }}
      --os-variant {{ vm_variant | default('rhel7') }}
      --os-type=linux
      --disk path=/var/lib/libvirt/images/{{ inventory_hostname }}/root-disk.qcow2,device=disk,bus=virtio,format=qcow2,discard=unmap,size={{ vm_disk_size }}
    {% if inventory_hostname in groups['provisioned_vms'] %}
      --disk /var/lib/libvirt/images/{{ inventory_hostname }}/cidata.iso,device=cdrom
      --import
    {% endif %}
    {% if vm_image_name is defined %}
    {%   if vm_image_data[vm_image_name] is defined %}
    {%     if (vm_image_data[vm_image_name]['arch'] is defined) %}
      --arch {{ vm_image_data[vm_image_name]['arch'] }}
    {%     else %}
      --hvm
    {%     endif %}
    {%   endif %}
    {% endif %}
    {% for k, v in hostvars[inventory_hostname]['vm_networks'].items() %}
      --network network:{{ k }},model=virtio,mac={{ v.mac | default(('52:54:01') | random_mac) }},driver_name=vhost,driver_queues=3,trustGuestRxFilters=yes
    {% endfor %}
      --name {{ inventory_hostname }}
      {{ vm_flags }}
      --dry-run
      --print-xml
      --check path_in_use=off
  changed_when: false
  register: vm_xml
  until: vm_xml.rc == 0
  retries: 3
  delay: 2

- name: Create disk image
  command: >-
    qemu-img create -f qcow2 -o preallocation=falloc /var/lib/libvirt/images/{{ inventory_hostname }}/root-disk.qcow2 {{ vm_disk_size }}G
  args:
    creates: "/var/lib/libvirt/images/{{ inventory_hostname }}/root-disk.qcow2"
  environment:
    LIBGUESTFS_BACKEND: direct
  register: disk_image
  until: disk_image.rc == 0
  retries: 3
  delay: 2

- name: Resize virt image
  command: >-
    virt-resize
    --expand /dev/sda1
    --align-first=auto
    {{ vm_image_data[vm_image_name]['path'] }}/{{ vm_image_data[vm_image_name]['name'] }}
    /var/lib/libvirt/images/{{ inventory_hostname }}/root-disk.qcow2
  register: resize_img
  until: resize_img is success
  retries: 3
  delay: 2
  environment:
    LIBGUESTFS_BACKEND: direct
  when:
    - vm_image_name is defined
    - vm_image_data[vm_image_name] is defined

- name: Define the VM
  virt:
    command: define
    xml: >-
      {{ vm_xml.stdout | replace('driver name="vhost" queues="3"', 'driver name="vhost" queues="3" txmode="iothread" ioeventfd="on" event_idx="off"') }}

- name: Bootable-vm block
  when:
    - inventory_hostname in groups['bootable_vms']
  block:
    - name: Get VM mac addresses
      shell: >-
        virsh dumpxml {{ inventory_hostname }} | awk -F"'" '/mac address/ {print $2}'
      delegate_to: "{{ vm_virt_host }}"
      changed_when: false
      register: vm_mac_addresses

    - name: Set mac address fact
      set_fact:
        vm_macs: "{{ vm_mac_addresses.stdout_lines | map('quote') | list }}"

    - name: Set instackenv file fact
      set_fact:
        instackenv_file: "{{ lookup('env','HOME') }}/vm-instackenv.yaml"
      when:
        - instackenv_file is undefined

    - name: Finishing block
      delegate_to: "localhost"
      connection: local
      run_once: true
      block:
        - name: Write instackenv file
          copy:
            content: |-
              {% set nodes_list = [] %}
              {% for node in ansible_play_batch %}
              {%   if node in groups['bootable_vms'] %}
              {%     set node_info = {} %}
              {%     set _ = node_info.__setitem__('mac', hostvars[node]['vm_macs']) %}
              {%     if 'name' in hostvars[node] %}
              {%       set node_name = hostvars[node]['name'] %}
              {%     else %}
              {%       set node_name = hostvars[node]['inventory_hostname'] %}
              {%     endif %}
              {%     set _ = node_info.__setitem__('name', node_name) %}
              {%     set _ = node_info.__setitem__('cpu', hostvars[node]['vm_cores']) %}
              {%     set _ = node_info.__setitem__('memory', hostvars[node]['vm_ram']) %}
              {%     set _ = node_info.__setitem__('disk', hostvars[node]['vm_disk_size']) %}
              {%     set _ = node_info.__setitem__('arch', 'x86_64') %}
              {%     set _ = node_info.__setitem__('pm_type', 'ipmi') %}
              {%     set _ = node_info.__setitem__('pm_user', hostvars[node]['vm_vbmc_username']) %}
              {%     set _ = node_info.__setitem__('pm_password', hostvars[node]['vm_vbmc_password']) %}
              {%     set _ = node_info.__setitem__('pm_addr', hostvars[hostvars[node]['vm_virt_host']]['ansible_host']) %}
              {%     set _ = node_info.__setitem__('pm_port', hostvars[node]['vm_vbmc_port']) %}
              {%     if 'capabilities' in hostvars[node] %}
              {%       set capabilities = hostvars[node]['capabilities'] ~ ',node:' ~ node_name %}
              {%       set _ = node_info.__setitem__('capabilities', capabilities) %}
              {%     endif %}
              {%     set _ = node_info.__setitem__('_comment', 'original target hostname [ ' ~ hostvars[node]['inventory_hostname'] ~ ' ]. This is a KVM VM controlled with VBMC.') %}
              {%     set _ = nodes_list.append(node_info) %}
              {%   endif %}
              {% endfor %}
              {% set render_this = {'nodes': nodes_list} %}
              {{ render_this | to_nice_yaml }}
            dest: "{{ instackenv_file }}"
          notify: Deployment notice
