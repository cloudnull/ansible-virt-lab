#!/usr/bin/env bash

set -ev

export THT="${THT:-/usr/share/openstack-tripleo-heat-templates}"
{% if (ansible_distribution | lower) != 'redhat' %}
{%   if True in (developer_patches | map(attribute='install_in_venv') | list) %}
source /opt/tripleo-patches/bin/activate
{%   endif %}
{% endif %}
{# Create basic role list #}
{% set roles = [] %}
{# Create basic environment list #}
{% set environments_user = [] %}
{% set environments = [
    '$THT/environments/enable-swap.yaml',
    '$THT/environments/disable-telemetry.yaml'
   ]
%}
{% if tripleo_low_memory | bool %}
{%   set _ = environments.append('$THT/environments/low-memory-usage.yaml') %}
{% endif %}
{% if (rh_it_ca_stat is defined) and (rh_it_ca_stat.stat.exists | bool) %}
{%   set _ = environments.append('$THT/environments/ssl/inject-trust-anchor.yaml') %}
{% endif %}
{# Deployment #}
{% if inventory_hostname in groups['undercloud'] %}
{#   multi-node #}
source ~/stackrc
{%   if (ansible_distribution | lower) == 'redhat' %}
openstack subnet set ctlplane-subnet --dns-nameserver {{ redhat_dns_servers[0] }} || true
{#
    NOTE(cloudnull): Remove image prepare, this is not required, though
                     it would be nice to expose this if enabled.
    openstack tripleo container image prepare -e local_images.yaml --output-env-file {{ ansible_env.HOME }}/containers-prepare-parameters.yaml
    {%     set _ = environments.append(ansible_env.HOME ~ '/containers-prepare-parameters.yaml') %}
#}
{%   else %}
openstack subnet set ctlplane-subnet --dns-nameserver {{ tripleo_dns_servers[0] }} || true
{#
    NOTE(cloudnull): Removed local push, while it may be useful, I'm not sure it is needed.
                     The generated template file has also been removed.
    openstack tripleo container image prepare default --local-push-destination --output-env-file {{ ansible_env.HOME }}/containers-prepare-parameters.yaml
    {%     set _ = environments.append(ansible_env.HOME ~ '/containers-prepare-parameters.yaml') %}
#}
{%   endif %}
pushd $THT
  $THT/tools/process-templates.py --roles-data $THT/roles_data.yaml -o /tmp/templates/
popd
{#   pre-provisioned nodes #}
{%   if (tripleo_deploy_pre_provisioned is defined) and (tripleo_deploy_pre_provisioned | bool) %}
{#
    NOTE(cloudnull): removed deployed-server-bootstap-*, in a future release we should be able to
                     support this if its found in an given deployment environment.
    {%     set _ = environments.append('/tmp/templates/environments/deployed-server-bootstrap-environment-' ~ tripleo_name_hash[(ansible_distribution | lower)] ~ '.yaml') %}
#}
{%     set _ = environments.append('/tmp/templates/environments/deployed-server-environment.yaml') %}
{#
    NOTE(cloudnull): Include the network-isolation template when we work out the bugs
    {%     set _ = environments.append('/tmp/templates/environments/network-isolation.yaml') %}
#}
{%     set _ = environments_user.append(ansible_env.HOME ~ '/pre-provisioned-parameters.yaml') %}
{%     set _ = roles.append('$THT/roles_data.yaml') %}
{%     if ((ansible_distribution | lower) == 'redhat') and (redhat_puddle_local_images_url is defined) %}
{%       set _ = environments_user.append(ansible_env.HOME ~ '/container_image_prepare.yaml') %}
{%     endif %}
{%   else %}
{#     ironic powered nodes #}
{%     set _ = roles.append('$THT/roles_data.yaml') %}
pushd ~/images
{%     if (ansible_distribution | lower) == 'redhat' %}
  for i in overcloud-full.tar ironic-python-agent.tar; do
    tar xf /usr/share/rhosp-director-images/$i
  done
{%     else %}
  export OS_YAML="/usr/share/openstack-tripleo-common/image-yaml/overcloud-images-{{ tripleo_name_hash[(ansible_distribution | lower)] }}-{{ ansible_distribution_version }}"
  export DIB_YUM_REPO_CONF="/etc/yum.repos.d/*"
  openstack overcloud image build
{%     endif %}
  openstack overcloud image upload --update-existing
popd
openstack overcloud node import vm-instackenv.yaml
openstack overcloud node introspect --all-manageable \
                                    --provide \
                                    --concurrency {{ (ansible_processor_vcpus | int) * 2  }} \
                                    || openstack overcloud node introspect --all-manageable \
                                                                           --provide
{%   endif %}
{#   Setup Non-HA architecture #}
{%   if not ((preprov_target_nodes | selectattr("tripleo_deploy_type", "match", ".*control.*") | list | length) > 1) %}
{%     set _ = environments.append('/tmp/templates/environments/podman.yaml') %}
{%   endif %}
{%   set _ = environments_user.append(ansible_env.HOME ~ '/parameters.yaml') %}
{%   set sorted_base_env_files = (environments | sort | list) %}
{%   set _ = sorted_base_env_files.extend(environments_user) %}
openstack --os-cloud undercloud overcloud deploy \
          --templates $THT/ \
          -r {{ roles | join(' -r ') }} \
          -e {{ sorted_base_env_files | join(' -e ') }} \
          --log-file {{ ansible_env.HOME }}/deploy.log \
          --disable-validations \
          --overcloud-ssh-user {{ ansible_env.USER }} \
          --overcloud-ssh-key {{ ansible_env.HOME }}/.ssh/id_rsa \
          --config-download-timeout 1024 \
          --timeout 1024
{% else %}
{#   Standalone #}
{%   set _ = environments.append('$THT/environments/standalone/standalone-tripleo.yaml') %}
{%   set _ = roles.append('$THT/roles/Standalone.yaml') %}
{% if tripleo_ceph_enabled | bool %}
{%   set _ = environments.extend(tripleo_ceph_standalone_templates) %}
{% endif %}
{%   set sorted_base_env_files = (environments | sort | list) %}
{%   set _ = sorted_base_env_files.extend(environments_user) %}
sudo --preserve-env=PATH,VIRTUAL_ENV openstack --os-cloud undercloud tripleo deploy  \
                                               --templates $THT \
                                               --local-ip={{ tripleo_job_address }}/{{ tripleo_cidr | ipaddr('prefix') }} \
                                               -r {{ roles | join(' -r ') }} \
                                               -e {{ sorted_base_env_files | join(' -e ') }} \
                                               --log-file {{ ansible_env.HOME }}/deploy.log \
                                               --output-dir {{ ansible_env.HOME }} \
                                               --standalone
{% endif %}
