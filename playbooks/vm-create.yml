---
# Ansible virtualization tools for lab based deployments
# Copyright (C) 2019  Kevin Carter
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


#
# This playbook has three basic options:
#   * vm_cleanup - if `true` clenaup old VMs and create create new ones
#   * vm_purge - if `true` purge all VMs
#   * vm_flags - Options to pass into libvirt (virt-install).
#
# This setup tool requires two networks to be enabled within libvirt: ['provisioning', 'external'].
#

- name: Create virtual machines
  hosts: all_vms
  any_errors_fatal: true
  gather_facts: false
  user: root
  vars_files:
    - vars/main.yml

  handlers:
    - name: Deployment notice
      debug:
        msg: >-
          VM(s) creation has completed. An instackenv file has been created for the generated nodes.
          This file can be found here `{{ lookup('env','HOME') }}/vm-instackenv.yaml`.
      run_once: true

    - name: Raw deployment notice
      debug:
        msg: >-
          VM(s) creation has completed. An instackenv file has been created for the generated nodes.
          This file can be found here `{{ lookup('env','HOME') }}/vm-lab-inventory.yaml`.
      run_once: true

  pre_tasks:
    - name: Check for required hostvars
      fail:
        msg: >-
          The required variable `{{ item.name }}` is undefined. Define the option in order to continue.
      when:
        - item.condition | bool
        - hostvars[inventory_hostname][item.name] is undefined
      with_items:
        - name: vm_virt_host
          condition: true
        - name: vm_cores
          condition: true
        - name: vm_ram
          condition: true
        - name: vm_disk_size
          condition: true
        - name: vm_vbmc_username
          condition: "{{ inventory_hostname in groups['osp_vms'] }}"
        - name: vm_vbmc_password
          condition: "{{ inventory_hostname in groups['osp_vms'] }}"
        - name: vm_vbmc_port
          condition: "{{ inventory_hostname in groups['osp_vms'] }}"
        - name: vm_image_name
          condition: "{{ inventory_hostname in groups['raw_vms'] }}"
      delegate_to: localhost
      connection: local

    - name: Create in-memory vm_virt_hosts group
      add_host:
        name: "{{ hostvars[item]['vm_virt_host'] }}"
        groups: vm_virt_hosts
      changed_when: false
      when:
        - hostvars[item]['vm_virt_host'] is defined
      loop: "{{ ansible_play_hosts }}"
      run_once: true

    - name: "Check for image"
      stat:
        path: "{{ vm_image_data[hostvars[inventory_hostname]['vm_image_name']]['path'] }}/{{ vm_image_data[hostvars[inventory_hostname]['vm_image_name']]['url'] | basename }}"
      delegate_to: "{{ hostvars[inventory_hostname]['vm_virt_host'] }}"
      register: image_stat

    - name: Download vm image
      get_url:
        url: "{{ vm_image_data[hostvars[item]['vm_image_name']]['url'] }}"
        dest: "{{ vm_image_data[hostvars[item]['vm_image_name']]['path'] }}/{{ vm_image_data[hostvars[item]['vm_image_name']]['url'] | basename }}"
      delegate_to: "{{ hostvars[item]['vm_virt_host'] }}"
      async: 1024
      poll: 0
      register: _image_get
      run_once: true
      loop: "{{ ansible_play_hosts }}"
      loop_control:
        label: "{{ item }} + {{ hostvars[item]['vm_image_name'] }}"
      when:
        - (((not ((vm_purge | default(false)) | bool)) and
           (inventory_hostname in groups['raw_vms'])) or
           (vm_image_get | bool))
        - not (hostvars[item]['image_stat']['stat']['exists'] | bool)

    - name: Pre-flight Checks
      delegate_to: "{{ vm_virt_host }}"
      block:
        - name: Check VM
          command: >-
            virsh dominfo {{ inventory_hostname }}
          failed_when: false
          changed_when: false
          register: vm_dominfo

        - name: Check VM provisioning network
          command: >-
            virsh net-info provisioning
          ignore_errors: true
          changed_when: false
          register: vm_netinfo_provisioning
          run_once: true
          delegate_to: "{{ item }}"
          with_items: "{{ groups['vm_virt_hosts'] }}"

        - name: Check VM external network
          command: >-
            virsh net-info external
          ignore_errors: true
          changed_when: false
          register: vm_netinfo_external
          run_once: true
          delegate_to: "{{ item }}"
          with_items: "{{ groups['vm_virt_hosts'] }}"

        - name: Fail when provisioning network is missing
          fail:
            msg: >-
              One of the required networks ['provisioning'] is missing on `{{ item.item }}`.
              Please ensure the network is created and online before continuing.
          when:
            - (item.failed | bool)
          loop: "{{ vm_netinfo_provisioning['results'] }}"
          loop_control:
            label: "{{ item.item }}"
          delegate_to: "{{ item.item }}"
          run_once: true

        - name: Fail when external network is missing
          fail:
            msg: >-
              One of the required networks ['external'] is missing on `{{ item.item }}`.
              Please ensure the network is created and online before continuing.
          when:
            - (item.failed | bool)
          loop: "{{ vm_netinfo_external['results'] }}"
          loop_control:
            label: "{{ item.item }}"
          delegate_to: "{{ item.item }}"
          run_once: true

    - name: Cleanup block
      when:
        - ((vm_cleanup | bool) and (vm_dominfo.rc == 0)) or (vm_purge | bool)
      delegate_to: "{{ vm_virt_host }}"
      block:
        - name: Stop running VM
          virt:
            name: "{{ inventory_hostname }}"
            command: destroy
          ignore_errors: true

        - name: Undefine running VM
          virt:
            name: "{{ inventory_hostname }}"
            command: undefine
          ignore_errors: true

        - name: Clean up base image file
          file:
            path: "/var/lib/libvirt/images/{{ inventory_hostname }}"
            state: absent

        - name: Remove node from vbmc
          command: /opt/vbmc/bin/vbmc delete {{ inventory_hostname }}
          ignore_errors: true

  tasks:
    - name: Check for purge
      meta: end_play
      when:
        - vm_purge | bool

    - name: Create block
      delegate_to: "{{ vm_virt_host }}"
      when:
        - (vm_cleanup | bool) or
          (vm_dominfo.rc != 0)
      block:
        - name: Create vm directory
          file:
            path: "/var/lib/libvirt/images/{{ inventory_hostname }}"
            state: directory

        - name: Gather virt-host facts
          setup:
            gather_subset: "!facter,!ohai"

        - include_tasks: task-files/_vm-osp-create.yml
          when:
            - inventory_hostname in groups['osp_vms']

        - include_tasks: task-files/_vm-raw-create.yml
          when:
            - inventory_hostname in groups['raw_vms']


# Generate a local inventory
- import_playbook: vm-inventory.yml
  when:
    - not ((vm_purge | default(false)) | bool)

- import_playbook: vm-update.yml
