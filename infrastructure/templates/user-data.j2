#cloud-config
# Customize as per your need. At least change username (vivek) and ssh-ed22519
# key with your actual public key
password: Password1
chpasswd: { expire: False }

# Hostname management
preserve_hostname: False
hostname: {{ inventory_hostname }}
fqdn: {{ inventory_hostname }}.localdomain

# Setup Users with ssh keys so that I can log in into new machine
users:
  - default
  - name: vm-user
    groups: []
    shell: /bin/bash
    sudo: ALL=(ALL) NOPASSWD:ALL
    ssh_pwauth: True
    ssh-authorized-keys:
      - "{{ lookup('file', vm_pub_key) }}"

# Configure where output will go
output:
  all: ">> /var/log/cloud-init.log"

# configure interaction with ssh server
ssh_svcname: ssh
ssh_deletekeys: True
ssh_genkeytypes: ['rsa', 'ecdsa']
ssh_pwauth: True

# Install your public ssh key to the first user-defined user configured
{% set keys = lookup('file', vm_pub_key).splitlines() %}
{% if vm_keys_links is defined %}
{%   for item in vm_keys_links %}
{%     for key in lookup('url', item, split_lines=True) %}
{%       set _ = keys.append(key) %}
{%     endfor %}
{%   endfor %}
{% endif %}
{% if vm_keys_files is defined %}
{%   for item in vm_keys_files %}
{%     for key in lookup('file', item).splitlines() %}
{%       set _ = keys.append(key) %}
{%     endfor %}
{%   endfor %}}
{% endif %}
ssh_authorized_keys: {{ keys }}

# set timezone for VM
timezone: UTC

{# image lookup information #}
{% set _image_name = hostvars[inventory_hostname]['vm_image_name'] %}
{% set _image_data = vm_image_data[_image_name] %}

{# Extra packages to install #}
{% if (_image_data['base_packages'] | length) > 0 %}
{%   set _ = vm_packages.extend(_image_data['base_packages']) %}
{% endif %}
packages: {{ vm_packages }}

{# Basic start section #}
{% set cmd_list = [
    "systemctl enable qemu-guest-agent"
    "systemctl restart qemu-guest-agent"
    "systemctl enable sshd",
    "systemctl restart sshd"
  ]
%}
{# NetworkManager block #}
{% if 'nmcli' in (vm_networks.values() | list | map(attribute='manager') | list) %}
{%   set _ = cmd_list.append('systemctl enable NetworkManager') %}
{%   set _ = cmd_list.append('systemctl start NetworkManager') %}
{%   set _ = cmd_list.append("nmcli con | egrep -wo '[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}' | xargs -n 1 nmcli con del") %}
{% endif %}
{% for k, v in vm_networks.items() %}
{%   if (v.manager is defined and v.manager == 'nmcli') %}
{%     if (v.interface is defined) and (v.address is defined) and (v.netmask is defined) and (v.gateway is defined) %}
{%       set _ = cmd_list.append('nmcli con add type ethernet con-name ' ~ v.interface ~ ' ifname ' ~ v.interface ~ ' ip4 ' ~ v.address ~ '/' ~ v.netmask ~ ' gw4 ' ~ v.gateway) %}
{%       set _ = cmd_list.append('nmcli con mod ' ~ v.interface ~ ' ipv4.addresses ' ~ v.address ~ '/' ~ v.netmask) %}
{%     elif (v.interface is defined) and (v.dhcp is defined and v.dhcp | bool) %}
{%       set _ = cmd_list.append('nmcli con add type ethernet con-name ' ~ v.interface ~ ' ifname ' ~ v.interface ~ ' ipv4.method auto ipv6.method auto') %}
{%       set _ = cmd_list.append('nmcli con mod ' ~ v.interface ~ ' ipv4.method auto ipv6.method auto') %}
{%     elif (v.interface is defined) and (v.dhcp is defined and not (v.dhcp | bool)) %}
{%       set _ = cmd_list.append('nmcli con add type ethernet con-name ' ~ v.interface ~ ' ifname ' ~ v.interface ~ ' ipv4.method disabled ipv6.method ignore') %}
{%       set _ = cmd_list.append('nmcli con mod ' ~ v.interface ~ ' ipv4.method disabled ipv6.method ignore') %}
{%     endif %}
{%     if (v.dns is defined) %}
{%       set _ = cmd_list.append('nmcli con mod ' ~ v.interface ~ ' ipv4.dns ' ~ (v.dns | join(' ') | to_json) ) %}
{%       set _ = cmd_list.append('nmcli con mod ' ~ v.interface ~ ' ipv4.ignore-auto-dns yes' ) %}
{%     endif %}
{%     set _ = cmd_list.append('nmcli con down ' ~ v.interface) %}
{%     set _ = cmd_list.append('nmcli con up ' ~ v.interface) %}
{%     if v.router is defined %}
{%       set _ = cmd_list.append('nmcli con mod ' ~ v.interface ~ ' ipv4.method manual') %}
{%       set _ = cmd_list.append("nmcli con mod " ~ v.interface ~ " ipv4.addresses $(nmcli device show $(nmcli device | awk '/" ~ v.interface ~ "/ {print $1}') | awk '/IP4.ADDRESS/ {print $2}' | tr '\n' ' ')") %}
{%       set _ = cmd_list.append('nmcli con mod ' ~ v.interface ~ ' ipv4.gateway ' ~ v.router | to_json) %}
{%       if (v.dns is undefined) %}
{%         set _ = cmd_list.append('nmcli con mod ' ~ v.interface ~ ' ipv4.dns ' ~ v.router | to_json) %}
{%         set _ = cmd_list.append('nmcli con mod ' ~ v.interface ~ ' ipv4.ignore-auto-dns yes' ) %}
{%       endif %}
{%       set _ = cmd_list.append('nmcli con down ' ~ v.interface) %}
{%       set _ = cmd_list.append('nmcli con up ' ~ v.interface) %}
{%     endif %}
{%   endif %}
{% endfor %}
{% if 'nmcli' in (vm_networks.values() | list | map(attribute='manager') | list) %}
{%   set _ = cmd_list.append("nmcli con | grep -i 'wired connection' | egrep -wo '[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}' | xargs -n 1 nmcli con del") %}
{% endif %}
{# Redhat developer setup #}
{% if _image_data['base_os'] == 'rhel' %}
{%   if redhat_package_url is defined %}
{%     set _ = cmd_list.append(_image_data['pkgmgr'] ~ ' install -y ' ~ redhat_package_url) %}
{%     set _ = cmd_list.append('rhos-release ' ~ redhat_rhos_release) %}
{%     set _ = cmd_list.append('yum -y install "python*virtualenv"') %}
{%   endif %}
{%   set _ = cmd_list.append('update-ca-trust enable') %}
{%   if redhat_ca_certs_url is defined %}
{%     set _ = cmd_list.append('curl -k ' ~ redhat_ca_certs_url ~ ' -o /etc/pki/ca-trust/source/anchors/' ~ (redhat_ca_certs_url | basename)) %}
{%     set _ = cmd_list.append('update-ca-trust extract') %}
{%   endif %}
{% endif %}
{# Timezone info #}
{% set _ = cmd_list.append('timedatectl set-timezone UTC') %}
{% set _ = cmd_list.append('hostnamectl --static --transient set-hostname ' ~ inventory_hostname | replace('_', '-') ~ '.localdomain') %}
runcmd: {{ cmd_list }}
