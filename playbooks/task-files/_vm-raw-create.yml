---
# Ansible virtualization tools for lab based deployments
# Copyright (C) 2019  Kevin Carter
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


- name: Copy meta file
  template:
    src: meta-data.j2
    dest: "/var/lib/libvirt/images/{{ inventory_hostname }}/meta-data"

- name: Copy user file
  template:
    src: user-data.j2
    dest: "/var/lib/libvirt/images/{{ inventory_hostname }}/user-data"

- name: 'Check on image get async task'
  async_status:
    jid: "{{ _image_get.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  retries: 96
  when:
    - inventory_hostname in groups['raw_vms']

- name: Check for existing vm image
  stat:
    path: "/var/lib/libvirt/images/{{ inventory_hostname }}/{{ inventory_hostname }}.qcow2"
  register: image_stat

- name: Unarchive block
  block:
    - name: Create temp image file (from archive)
      unarchive:
        src: "{{ vm_image_data[vm_image_name]['path'] }}/{{ vm_image_data[vm_image_name]['url'] | basename }}"
        dest: "/var/lib/libvirt/images/{{ inventory_hostname }}"
        remote_src: true

    - name: Move temp image
      command: >-
        mv /var/lib/libvirt/images/{{ inventory_hostname }}/{{ vm_image_data[vm_image_name]['name'] }}
        /var/lib/libvirt/images/{{ inventory_hostname }}/{{ inventory_hostname }}.qcow2
  when:
    - (vm_image_data[vm_image_name]['url'] | basename).split('.')[-1] in ['zip', 'xz', 'tar', 'gz']
    - not (image_stat.stat.exists | bool)

- name: Create temp image file (from copy)
  copy:
    src: "{{ vm_image_data[vm_image_name]['path'] }}/{{ vm_image_data[vm_image_name]['name'] }}"
    dest: "/var/lib/libvirt/images/{{ inventory_hostname }}/{{ inventory_hostname }}.qcow2"
    remote_src: true
  when:
    - not ((vm_image_data[vm_image_name]['url'] | basename).split('.')[-1] in ['zip', 'xz', 'tar', 'gz'])
    - not (image_stat.stat.exists | bool)

- name: Create disk image
  command: >-
    qemu-img convert -f {{ vm_image_data[vm_image_name]['path'] }}/{{ vm_image_data[vm_image_name]['name'] }} /var/lib/libvirt/images/{{ inventory_hostname }}/{{ inventory_hostname }}.qcow2
  args:
    creates: "/var/lib/libvirt/images/{{ inventory_hostname }}/{{ inventory_hostname }}.qcow2"
  register: image_convert
  environment:
    LIBGUESTFS_BACKEND: direct

- name: Resize virt image
  command: >-
    qemu-img
    resize
    /var/lib/libvirt/images/{{ inventory_hostname }}/{{ inventory_hostname }}.qcow2
    {{ vm_disk_size }}G
  when:
    - image_convert is changed

- name: Create cloud init iso
  command: >-
    genisoimage -output /var/lib/libvirt/images/{{ inventory_hostname }}/cidata.iso -volid cidata -joliet -r user-data meta-data
  args:
    chdir: "/var/lib/libvirt/images/{{ inventory_hostname }}"
    creates: "/var/lib/libvirt/images/{{ inventory_hostname }}/cidata.iso"

- name: Create virt xml
  command: >-
    virt-install
      --ram {{ vm_ram }}
      --vcpus={{ vm_cores }},sockets=1,cores={{ vm_cores }}
      --os-variant {{ vm_variant | default('rhel7') }}
      --os-type=linux
      --disk path=/var/lib/libvirt/images/{{ inventory_hostname }}/{{ inventory_hostname }}.qcow2,device=disk,bus=virtio,format=qcow2,discard=unmap,size={{ vm_disk_size }}
      --disk /var/lib/libvirt/images/{{ inventory_hostname }}/cidata.iso,device=cdrom
      --import
      --network network:external,model=virtio,mac={{ ('52:54:01') | random_mac }}
      --network network:provisioning,model=virtio,mac={{ ('52:54:00') | random_mac }}
      --name {{ inventory_hostname }}
      {{ vm_flags }}
      --dry-run
      --print-xml
      --check path_in_use=off
  register: vm_xml
  until: vm_xml.rc == 0
  retries: 16
  delay: 2

- name: Define the VM
  virt:
    command: define
    xml: "{{ vm_xml.stdout }}"
