# Ansible cloud tools for lab based deployments
# Copyright (C) 2019  Kevin Carter
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


- name: Group vm job target node
  hosts: localhost
  connection: local
  any_errors_fatal: true
  gather_facts: true
  user: root
  tasks:
    - name: Check for required hostvars
      fail:
        msg: >-
          The required variable `vm_job_target` is undefined. Define the option in order to continue.
      when:
        - vm_job_target is undefined

    - name: Check for required hostvars
      fail:
        msg: >-
          The required variable `vm_job_user` is undefined. Define the option in order to continue.
      when:
        - vm_job_user is undefined

    - name: Check for required hostvars
      fail:
        msg: >-
          The required variable `vm_job_reproducer_url` is undefined. Define the option in order to continue.
      when:
        - vm_job_reproducer_url is undefined

    - name: Create in-memory vm_virt_hosts group
      add_host:
        name: "{{ hostvars[vm_job_target]['vm_virt_host'] }}"
        groups: vm_virt_host
      changed_when: false

    - name: Get IP address
      shell: >-
        virsh domifaddr {{ vm_job_target }} --source agent | grep -v 'lo' | grep 'ipv4'
      register: _vm_ip
      changed_when: false
      until: _vm_ip.rc == 0
      retries: 72
      delay: 2
      delegate_to: "{{ hostvars[vm_job_target]['vm_virt_host'] }}"

    - name: Set vm ip information
      set_fact:
        vm_ip: "{{ _vm_ip.stdout.split()[3].split('/')[0] }}"

    - name: Create in-memory vm_target group
      add_host:
        name: "{{ vm_job_target }}"
        groups: vm_target
        ansible_host: "{{ vm_ip }}"
        ansible_user: "{{ vm_job_user }}"
      changed_when: false


- name: Run updates
  hosts: "vm_target"
  any_errors_fatal: true
  gather_facts: true
  become: true
  pre_tasks:
    - name: Gather variables for each operating system
      include_vars: "{{ item }}"
      with_first_found:
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_os_family | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}.yml"
        - "{{ ansible_os_family | lower }}-{{ ansible_distribution_version.split('.')[0] }}.yml"
        - "{{ ansible_os_family | lower }}.yml"
      tags:
        - always

    - name: Run package updates
      package:
        name: "*"
        state: "latest"
        update_cache: "{{ ((ansible_os_family | lower) == 'debian') | ternary('yes', omit) }}"
      register: package_updates

    - name: Install developer packages
      package:
        name: "{{ developer_system_packages }}"
        state: present

    - name: Generate a keypair
      openssh_keypair:
        path: "{{ ansible_env.HOME }}/.ssh/id_rsa"
      become: true

    - name: Reboot target
      reboot:
        reboot_timeout: 3600
      when:
        - package_updates is changed
  tasks:
    - name: Create reproducer directory
      file:
        path: "{{ ansible_env.HOME }}/reproducer"
        state: directory

    - name: Unarchive reproducer tarball
      unarchive:
        src: "{{ vm_job_reproducer_url }}"
        dest: "{{ ansible_env.HOME }}/reproducer"
        remote_src: yes

    - name: Run reproducer command
      command: "{{ item }}"
      args:
        chdir: "{{ ansible_env.HOME }}/reproducer"
      with_items:
        - tmux new-session -d -s dev-test
        - tmux select-pane -t 0
        - tmux send-keys "python -m virtualenv --system-site-packages /opt/reproducer" C-m
        - tmux send-keys "/opt/reproducer/bin/pip install ansible" C-m
        - tmux send-keys "export ANSIBLE_LOG_PATH=/tmp/test.log" C-m
        - tmux send-keys "/opt/reproducer/bin/ansible-playbook launcher-env-setup-playbook.yaml" C-m
        - tmux send-keys "/opt/reproducer/bin/ansible-playbook launcher-playbook.yaml" C-m
