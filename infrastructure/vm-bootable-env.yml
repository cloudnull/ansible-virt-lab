---
# Ansible cloud tools for lab based deployments
# Copyright (C) 2019  Kevin Carter
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


- name: Inspect target virtual machines
  hosts: bootable_vms
  any_errors_fatal: true
  gather_facts: false
  vars_files:
    - vars/main.yml

  handlers:
    - name: Deployment notice
      debug:
        msg: >-
          VM(s) creation has completed. An instackenv file has been created for the generated nodes.
          This file can be found here `{{ instackenv_file }}`.
      run_once: true

  pre_tasks:
    - name: Get VM mac addresses
      shell: >-
        virsh dumpxml --domain "{{ inventory_hostname }}" | awk -F"'" '/mac address/ {print $2}'
      delegate_to: "{{ vm_virt_host }}"
      changed_when: false
      register: vm_mac_addresses
      become: true

    - name: Set mac address fact
      set_fact:
        vm_macs: "{{ vm_mac_addresses.stdout_lines | map('quote') | list }}"

    - name: Set instackenv file fact
      set_fact:
        instackenv_file: "{{ lookup('env','HOME') }}/vm-instackenv.yaml"
      when:
        - instackenv_file is undefined

  post_tasks:
    - name: Write instackenv file
      connection: local
      delegate_to: localhost
      run_once: true
      copy:
        content: |-
          {% set nodes_list = [] %}
          {% for node in ansible_play_batch %}
          {%   if node in groups['bootable_vms'] | default([]) %}
          {%     set node_info = {} %}
          {%     if (hostvars[node]['vm_macs'] | length) > 0%}
          {%       set _ = node_info.__setitem__('mac', hostvars[node]['vm_macs']) %}
          {%     endif %}
          {%     if 'name' in hostvars[node] %}
          {%       set node_name = hostvars[node]['name'] %}
          {%     else %}
          {%       set node_name = hostvars[node]['inventory_hostname'] %}
          {%     endif %}
          {%     set _ = node_info.__setitem__('name', node_name) %}
          {%     set _ = node_info.__setitem__('cpu', hostvars[node]['vm_cores']) %}
          {%     set _ = node_info.__setitem__('memory', hostvars[node]['vm_ram']) %}
          {%     set _ = node_info.__setitem__('disk', hostvars[node]['vm_disk_size']) %}
          {%     set _ = node_info.__setitem__('arch', 'x86_64') %}
          {%     set _ = node_info.__setitem__('pm_type', 'ipmi') %}
          {%     set _ = node_info.__setitem__('pm_user', hostvars[node]['vm_vbmc_username']) %}
          {%     set _ = node_info.__setitem__('pm_password', hostvars[node]['vm_vbmc_password']) %}
          {%     set _ = node_info.__setitem__('pm_addr', hostvars[hostvars[node]['vm_virt_host']]['ansible_host']) %}
          {%     set _ = node_info.__setitem__('pm_port', hostvars[node]['vm_vbmc_port']) %}
          {%     if 'tripleo_capabilities' in hostvars[node] %}
          {%       set tripleo_capabilities = hostvars[node]['tripleo_capabilities'] ~ ',node:' ~ node_name %}
          {%       set _ = node_info.__setitem__('capabilities', tripleo_capabilities) %}
          {%     endif %}
          {%     set _ = node_info.__setitem__('_comment', 'original target hostname [ ' ~ hostvars[node]['inventory_hostname'] ~ ' ]. This is a KVM VM controlled with VBMC.') %}
          {%     set _ = nodes_list.append(node_info) %}
          {%   endif %}
          {% endfor %}
          {% set render_this = {'nodes': nodes_list} %}
          {{ render_this | to_nice_yaml }}
        dest: "{{ instackenv_file }}"
      notify: Deployment notice
