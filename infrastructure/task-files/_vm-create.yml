---
# Ansible virtualization tools for lab based deployments
# Copyright (C) 2019  Kevin Carter
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

- name: Cloud-init block
  when:
    - inventory_hostname in groups['provisioned_vms']
    - vm_bootable_iso is undefined
  block:
    - name: Copy meta file
      template:
        src: meta-data.j2
        dest: "/var/lib/libvirt/images/{{ inventory_hostname }}/meta-data"

    - name: Copy user file
      template:
        src: user-data.j2
        dest: "/var/lib/libvirt/images/{{ inventory_hostname }}/user-data"
      vars:
        vm_packages: "{{ vm_image_data[hostvars[inventory_hostname]['vm_image_name']]['cloud_init_packages'] }}"

    - name: Create cloud init iso
      command: >-
        genisoimage -output /var/lib/libvirt/images/{{ inventory_hostname }}/cidata.iso -volid cidata -joliet -r user-data meta-data
      args:
        chdir: "/var/lib/libvirt/images/{{ inventory_hostname }}"
        creates: "/var/lib/libvirt/images/{{ inventory_hostname }}/cidata.iso"

- name: Passthrough pci block
  block:
    - name: Passthrough PCI lookup
      command: "lspci"
      changed_when: false
      register: pci_devices

    - name: Vm node list lookup
      command: "virsh nodedev-list"
      changed_when: false
      register: virsh_nodedev

    - name: Set passthrough devices fact
      set_fact:
        pci_passthrough_devices: "{{ pci_devices.stdout | regex_findall(vm_passthrough_lookup_regex, multiline=True, ignorecase=True) | list }}"

    - name: Set vm passthrough devices fact
      set_fact:
        vm_pci_passthrough_devices: |-
          {% set devices = [] %}
          {% for device in pci_passthrough_devices %}
          {%   set node_dev = device.split()[0] | replace(":", "_") | replace(".", "_") %}
          {%   set node_lookup = virsh_nodedev.stdout | regex_search('.*' ~ node_dev, multiline=True, ignorecase=True) %}
          {%   if node_lookup %}
          {%     set _ = devices.append(node_lookup) %}
          {%   endif %}
          {% endfor %}
          {{ devices }}

    - name: Show discovered devices
      debug:
        var: pci_passthrough_devices

    - name: Show discovered nodes
      debug:
        var: vm_pci_passthrough_devices
  when:
    - vm_passthrough_lookup_regex is defined
    - vm_pci_passthrough_devices is undefined

- name: Create virt xml
  command: >-
    virt-install
      --ram {{ vm_ram }}
      --vcpus={{ vm_cores }},sockets=1,cores={{ vm_cores }}
      --os-variant {{ vm_variant | default('rhel7') }}
      --disk path=/var/lib/libvirt/images/{{ inventory_hostname }}/root-disk.qcow2,device=disk,bus=virtio,format=qcow2,discard=unmap,size={{ vm_disk_size }},cache=none
    {% if vm_bootable_iso is defined %}
      --disk {{ vm_iso_path }}/{{ vm_bootable_iso }},device=cdrom
      --boot hd,cdrom,menu=on,useserial=on
    {% elif inventory_hostname in groups['provisioned_vms'] %}
      --disk /var/lib/libvirt/images/{{ inventory_hostname }}/cidata.iso,device=cdrom
      --import
    {% endif %}
    {% if vm_additional_isos is defined %}
    {%   for iso in vm_additional_isos %}
      --disk {{ vm_iso_path }}/{{ iso }},device=cdrom
    {%   endfor %}
    {% endif %}
    {% if vm_image_name is defined %}
    {%   if vm_image_data[vm_image_name] is defined %}
    {%     if (vm_image_data[vm_image_name]['arch'] is defined) %}
      --arch {{ vm_image_data[vm_image_name]['arch'] }}
    {%     else %}
      --hvm
      --cpu host-passthrough,cache.mode=passthrough
    {%     endif %}
    {%   endif %}
    {% endif %}
    {% for k, v in hostvars[inventory_hostname]['vm_networks'].items() %}
    {%   if v.mac is defined %}
      --network network:{{ k }},model=virtio,mac={{ v.mac  }},driver_name=vhost,driver_queues=3,trustGuestRxFilters=yes
    {%   else %}
      --network network:{{ k }},model=virtio,mac={{ v.mac_seed | default('52:54:01') | random_mac }},driver_name=vhost,driver_queues=3,trustGuestRxFilters=yes
    {%   endif %}
    {% endfor %}
    {% for device in (vm_pci_passthrough_devices | default([])) %}
      --host-device={{ device }}
    {% endfor %}
      --name {{ inventory_hostname }}
      {{ vm_flags }}
      --watchdog default,action=poweroff
      --dry-run
      --print-xml
      --check all=off
      --noautoconsole
  changed_when: false
  register: vm_xml
  until: vm_xml.rc == 0
  retries: 3
  delay: "{{ 8 | random }}"

- name: Create vm block
  block:
    - name: Create disk image
      command: >-
        qemu-img create
        -f qcow2
        -o preallocation=falloc
        /var/lib/libvirt/images/{{ inventory_hostname }}/root-disk.qcow2
        {{ vm_disk_size }}G
      args:
        creates: "/var/lib/libvirt/images/{{ inventory_hostname }}/root-disk.qcow2"
      environment:
        LIBGUESTFS_BACKEND: direct
      register: disk_image
      until: disk_image.rc == 0
      retries: 5
      delay: "{{ 16 | random }}"

    - name: Resize virt image
      command: >-
        virt-resize
        --expand /dev/sda1
        --align-first=auto
        {{ vm_image_data[vm_image_name]['path'] }}/{{ vm_image_data[vm_image_name]['name'] }}
        /var/lib/libvirt/images/{{ inventory_hostname }}/root-disk.qcow2
      register: resize_img
      until: resize_img is success
      retries: 5
      delay: "{{ 16 | random }}"
      environment:
        LIBGUESTFS_BACKEND: direct
      when:
        - vm_image_name is defined
        - vm_image_data[vm_image_name] is defined
        - vm_bootable_iso is undefined
  rescue:
    - name: Create disk image (fallback)
      command: >-
        qemu-img create
        -f qcow2
        -o preallocation=falloc
        /var/lib/libvirt/images/{{ inventory_hostname }}/root-disk.qcow2
        {{ vm_disk_size }}G
      args:
        creates: "/var/lib/libvirt/images/{{ inventory_hostname }}/root-disk.qcow2"
      environment:
        LIBGUESTFS_BACKEND: direct
      register: disk_image
      until: disk_image.rc == 0
      retries: 5
      delay: "{{ 16 | random }}"

    - name: Resize virt image (fallback)
      command: >-
        virt-resize
        --expand /dev/sda1
        --align-first=auto
        {{ vm_image_data[vm_image_name]['path'] }}/{{ vm_image_data[vm_image_name]['name'] }}
        /var/lib/libvirt/images/{{ inventory_hostname }}/root-disk.qcow2
      register: resize_img
      until: resize_img is success
      retries: 5
      delay: "{{ 16 | random }}"
      environment:
        LIBGUESTFS_BACKEND: direct
      when:
        - vm_image_name is defined
        - vm_image_data[vm_image_name] is defined
        - vm_bootable_iso is undefined

- name: Define the VM
  virt:
    command: define
    xml: >-
      {{ vm_xml.stdout | replace('driver name="vhost" queues="3"', 'driver name="vhost" queues="3" txmode="iothread" ioeventfd="on" event_idx="off"') }}

- name: Set vm created local fact
  ini_file:
    dest: "/etc/ansible/facts.d/virt_cloud.fact"
    section: "{{ inventory_hostname }}"
    option: "created"
    value: "true"
