---
# Ansible cloud tools for lab based deployments
# Copyright (C) 2019  Kevin Carter
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


- name: Inspect target virtual machines
  hosts: provisioned_vms
  any_errors_fatal: true
  gather_facts: false
  vars_files:
    - vars/main.yml

  handlers:
    - name: Display ip address
      debug:
        msg: >-
          VM {{ inventory_hostname }} is online. IP address {{ vm_ip_address }}
      when:
        - vm_bootable_iso is undefined

  tasks:
    - name: Set inventory file path
      set_fact:
        vm_job_user: "{{ vm_image_data[hostvars[inventory_hostname]['vm_image_name'] | default('dummy')]['access_user'] }}"

    - name: Set inventory file path
      set_fact:
        vm_job_target: "{{ inventory_hostname }}"

    - name: VM start block
      delegate_to: "{{ vm_virt_host }}"
      become: true
      block:
        - name: Start VM
          virt:
            name: "{{ inventory_hostname }}"
            state: running
            autostart: true
          notify: Display ip address

        - name: Get IP address
          shell: >-
            virsh domifaddr {{ inventory_hostname }} --source agent | grep -v 'lo' | grep 'ipv4'
          changed_when: false
          register: vm_ip
          until: vm_ip.rc == 0
          retries: 72
          delay: 5
          when:
            - vm_bootable_iso is undefined

        - name: Set ip fact
          set_fact:
            vm_ip_address: "{{ vm_ip.stdout.split()[3].split('/')[0] }}"
          vars:
            ansible_python_interpreter: "{{ vm_image_data[hostvars[inventory_hostname]['vm_image_name'] | default('dummy')]['python_interpreter'] }}"
          when:
            - vm_bootable_iso is undefined

        - name: Get console address
          command: >-
            virsh domdisplay {{ inventory_hostname }}
          changed_when: false
          register: vm_console

        - name: Set console fact
          set_fact:
            vm_console_address: "{{ vm_console.stdout | replace('localhost', hostvars[vm_virt_host]['ansible_host']) }}"

    - name: Set limit vm group
      set_fact:
        vm_limit_group: "{{ ansible_play_hosts_all }}"
      delegate_to: localhost
      delegate_facts: true


- name: Create local virtual machines inventory
  hosts: localhost
  connection: local
  any_errors_fatal: true
  gather_facts: false
  vars_files:
    - vars/main.yml

  handlers:
    - name: Raw deployment notice
      debug:
        msg: >-
          VM(s) creation has completed. An inventory file has been created for the generated nodes.
          This file can be found here `{{ vm_inventory_file }}`.
      run_once: true

  tasks:
    - name: Show limit group
      debug:
        msg: "{{ vm_limit_group }}"

    - name: Set inventory file path
      set_fact:
        vm_inventory_file: "{{ lookup('env','HOME') }}/vm-lab-inventory.yaml"
      when:
        - vm_inventory_file is undefined

    - name: Finishing block
      run_once: true
      block:
        - name: Check for inventory file
          stat:
            path: "{{ vm_inventory_file }}"
          register: vm_inv_file

        - name: Read existing inventory file
          set_fact:
            existing_vm_inventory_file: "{{ lookup('file', vm_inventory_file) | default('---') | from_yaml }}"
          when:
            - vm_inv_file.stat.exists | bool

        - name: Write new inventory file
          copy:
            content: |-
              {% for node in vm_limit_group %}
              {%   if node in groups['provisioned_vms'] %}
              {%
                     set entry = {
                       'ansible_user': vm_image_data[hostvars[node]['vm_image_name'] | default('dummy')]['access_user'],
                       'ansible_python_interpreter': vm_image_data[hostvars[node]['vm_image_name'] | default('dummy')]['python_interpreter'],
                       'vm_job_user': vm_image_data[hostvars[node]['vm_image_name'] | default('dummy')]['access_user'],
                       'vm_job_target': node,
                       'vm_virt_host': hostvars[node]['vm_virt_host'],
                       'tripleo_deploy_type': hostvars[node]['tripleo_deploy_type'] | default('undefined')
                     }
              %}
              {%     if 'vm_ip_address' in hostvars[node] %}
              {%       set _ = entry.__setitem__('ansible_host', hostvars[node]['vm_ip_address']) %}
              {%     endif %}
              {%     if 'vm_preprov_networks' in hostvars[node] %}
              {%       set _ = entry.__setitem__('vm_preprov_networks', hostvars[node]['vm_preprov_networks']) %}
              {%     endif %}
              {%     if 'vm_management_net' in hostvars[node] %}
              {%       set _ = entry.__setitem__('vm_management_net', hostvars[node]['vm_management_net']) %}
              {%     endif %}
              {%     if 'vm_console_address' in hostvars[node] %}
              {%       set _ = entry.__setitem__('vm_console_uri', hostvars[node]['vm_console_address']) %}
              {%     endif %}
              {%     set _ = inventory['vms']['hosts'].__setitem__(node, entry) %}
              {%     if hostvars[node]['tripleo_undercloud_target'] | default(false) | bool %}
              {%       set _ = inventory['vms']['children']['undercloud']['hosts'].__setitem__(node, {}) %}
              {%     endif %}
              {%     if hostvars[node]['tripleo_overcloud_target'] | default(false) | bool %}
              {%       set _ = inventory['vms']['children']['overcloud']['hosts'].__setitem__(node, {}) %}
              {%     endif %}
              {%   endif %}
              {% endfor %}
              {{ (existing_vm_inventory_file | default({})) | combine(inventory, recursive=True) | to_nice_yaml }}
            dest: "{{ vm_inventory_file }}"
          notify: Raw deployment notice
          vars:
            inventory:
              vms:
                vars:
                  ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
                hosts: {}
                children:
                  overcloud:
                    hosts: {}
                  undercloud:
                    hosts: {}

    - name: Display vm ip
      debug:
        msg: >-
          The target VM has an ip address of `{{ hostvars[item]['vm_ip_address'] }}`.
          The OS image is `{{ hostvars[item]['vm_image_name'] }}`.
          The access user is `{{ vm_image_data[hostvars[item]['vm_image_name']]['access_user'] }}`
      when:
        - hostvars[item]['vm_ip_address'] is defined
        - item in groups['provisioned_vms']
      with_items: "{{ vm_limit_group }}"
      run_once: true
