---
# Ansible virtualization tools for lab based deployments
# Copyright (C) 2019  Kevin Carter
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


#
# This playbook has three basic options:
#   * vm_cleanup - if `true` clenaup old VMs and create create new ones
#   * vm_purge - if `true` purge all VMs
#   * vm_flags - Options to pass into libvirt (virt-install).
#
# This setup tool requires two networks to be enabled within libvirt: ['provisioning', 'external'].
#

- name: Create virtual machines
  hosts: all_vms
  any_errors_fatal: true
  gather_facts: false
  user: root
  vars:
    image_download_set: |-
      {% set image_set = {} %}
      {% for host in ansible_play_hosts %}
      {%   set _ = image_set.__setitem__(
          hostvars[host]['vm_virt_host']
          ~ ':'
          ~ vm_image_data[hostvars[host]['vm_image_name']]['path']
          ~ ':' ~ vm_image_data[hostvars[host]['vm_image_name']]['name'],
          vm_image_data[hostvars[host]['vm_image_name']]['url']
        )
      %}
      {% endfor %}
      {{ image_set }}
  vars_files:
    - vars/main.yml
  tasks:
    - name: Ensure image path exists
      file:
        dest: "{{ item.key.split(':')[1] }}"
        state: directory
        group: "root"
        owner: "root"
        mode:  "0755"
        recurse: no
      run_once: true
      delegate_to: "{{ item.key.split(':')[0] }}"
      loop: "{{ image_download_set | dict2items }}"
      loop_control:
        label: "{{ item.key.split(':')[0] }} + {{ item.key.split(':')[-1] }}"
      when:
        - ansible_local['virt_cloud']['setup']['initialized'] is undefined

    - name: Download vm image
      get_url:
        url: "{{ item.value }}"
        dest: "{{ item.key.split(':')[1] }}/{{ item.key.split(':')[-1]  }}"
      delegate_to: "{{ item.key.split(':')[0] }}"
      async: 1024
      poll: 0
      register: _image_get
      run_once: true
      loop: "{{ image_download_set | dict2items }}"
      loop_control:
        label: "{{ item.key.split(':')[0] }} + {{ item.key.split(':')[-1] }}"
      when:
        - (((not ((vm_purge | default(false)) | bool)) and
           (inventory_hostname in groups['raw_vms'])) or
           (vm_image_get | bool))

    - name: Check on image get async task
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: 192
      run_once: true
      loop: "{{ _image_get['results'] }}"
      delegate_to: "{{ item.item.key.split(':')[0] }}"
      when:
        item.changed | bool
