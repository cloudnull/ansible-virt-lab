# Ansible cloud tools for lab based deployments
# Copyright (C) 2019  Kevin Carter
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


- name: Run tripleo deployment
  hosts: "undercloud"
  any_errors_fatal: true
  gather_facts: true

  vars_files:
    - vars/main.yml

  tasks:
    - name: Slurp key from undercloud
      slurp:
        src: "{{ ansible_env.HOME }}/.ssh/id_rsa.pub"
      register: pub_key_content

    - name: Add key to overcloud
      authorized_key:
        user: "{{ ansible_user }}"
        state: present
        key: "{{ pub_key_content['content'] | b64decode }}"
      run_once: true
      delegate_to: "{{ item }}"
      with_items: "{{ groups['overcloud'] | union(groups['minion']) }}"

    - name: Synchronize repos
      command: >-
        rsync -avz
        --rsync-path="sudo rsync"
        --rsh="/bin/ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
        /etc/yum.repos.d/
        {{ ansible_env.USER }}@{{ hostvars[item]['ansible_host'] }}:/etc/yum.repos.d/
      run_once: true
      with_items: "{{ groups['overcloud'] | union(groups['minion']) }}"
      when:
        - (ansible_distribution | lower) != 'redhat'

    - name: Pre-provisioned node setup
      when:
        - (tripleo_deploy_pre_provisioned is defined) and (tripleo_deploy_pre_provisioned | bool)
      block:
        - name: Read pre-provisioned node yaml
          slurp:
            src: "{{ ansible_env.HOME }}/{{ vm_inventory_file | basename }}"
          register: preprov_targets

        - name: Read pre-provisioned nodes data
          set_fact:
            preprov_target_nodes: "{{ (preprov_targets['content'] | b64decode | from_yaml)['vms']['hosts'].values() | list }}"

    - name: Run vm pre-prov networks setup
      shell: |-
        set -o pipefail
        {% for k, v in hostvars[item]['vm_preprov_networks'].items() %}
        nmcli connection | awk '/{{ k }}/ {print $2}' | xargs -n 1 nmcli connection delete
        nmcli con add type ethernet ifname {{ k }} ipv4.method manual ipv6.method ignore con-name {{ k }} ipv4.address {{ v | join(',') }}
        {% endfor %}
      become: true
      run_once: true
      delegate_to: "{{ item }}"
      when:
        - "'vm_preprov_networks' in hostvars[item]"
      with_items: "{{ groups['overcloud'] | union(groups['undercloud']) | union(groups['minion']) }}"

    - name: Run deployment command(s)
      shell: "{{ ansible_env.HOME }}/deploy-start-script.sh"
      when:
        tripleo_deploy_run | bool

    - name: Build notice
      debug:
        msg: >-
          Stack creation has started. Connect to the system `{{ ansible_host }}`
          as `{{ vm_job_user }}`. When ready, you can monitor the installation
          progress via the `standalone` tmux session.
